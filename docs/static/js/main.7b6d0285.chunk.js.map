{"version":3,"sources":["constants/words.js","components/autocompleteInput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fruitList","Button","styled","List","Field","Item","AutocompleteInput","useState","results","setResults","inputValue","setInputValue","highlightedIndex","setHighlightedIndex","highlightedOption","useRef","useEffect","inputValueLowerCase","toLowerCase","filterResults","filter","item","includes","parsedResults","length","map","original","bold","replace","RegExp","str","boldString","current","scrollIntoView","behavior","handleElementSelection","event","target","textContent","data-testid","onInput","value","onKeyUp","key","next","click","index","opts","className","undefined","onClick","dangerouslySetInnerHTML","__html","title","AppHeader","AppWrapper","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAAaA,EAAY,CACzB,aACA,QACA,OACA,UACA,UACA,SACA,WACA,aACA,eACA,eACA,YACA,cACA,gBACA,cACA,UACA,SACA,YACA,cACA,aACA,UACA,YACA,WACA,SACA,OACA,cACA,SACA,SACA,aACA,SACA,MACA,aACA,aACA,QACA,SACA,aACA,QACA,aACA,cACA,aACA,YACA,SACA,gBACA,aACA,SACA,gBACA,SACA,YACA,UACA,QACA,OACA,SACA,SACA,SACA,QACA,aACA,cACA,QACA,aACA,WACA,aACA,gBACA,WACA,YACA,QACA,QACA,SACA,eACA,aACA,YACA,YACA,SACA,eACA,QACA,OACA,YACA,WACA,OACA,QACA,YACA,YACA,UACA,cACA,SACA,oBACA,SACA,YACA,cACA,WACA,aACA,QACA,QACA,UACA,UACA,aACA,aACA,aACA,iBACA,YACA,WACA,aACA,gBACA,eACA,OACA,UACA,cACA,eACA,cACA,WACA,WACA,QACA,MACA,UACA,SACA,SACA,Y,OC/GMC,EAASC,YAAO,SAAPA,CAAH,iSAkBNC,EAAOD,YAAO,KAAPA,CAAH,yJASJE,EAAQF,YAAO,QAAPA,CAAH,sSAgBLG,EAAOH,YAAO,KAAPA,CAAH,wHA8FKI,EAtFW,WACxB,MAA8BC,mBAA4C,IAA1E,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCF,mBAAiB,IAArD,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAgDJ,oBAAkB,GAAlE,mBAAOK,EAAP,KAAyBC,EAAzB,KACMC,EAAoBC,mBAM1BC,qBAAU,WACR,GAAIN,EAAJ,CAAiB,IAAD,EACRO,EAAsBP,EAAWQ,cACjCC,EAAgBnB,EAAUoB,QAAO,SAACC,GAAD,OAAUA,EAAKH,cAAcI,SAASL,MAGvEM,GAFaJ,EAAcK,OAAS,IAAK,UAAAL,EAAc,UAAd,eAAkBD,iBAAkBD,EAAsBE,EAAgB,IAExFM,KAAI,SAACJ,GAOpC,MAAO,CAAEK,SAAUL,EAAMM,KANN,SAACN,EAAcX,GAIhC,OAAOW,EAAKO,QAAQC,OAAOnB,EAAa,OAH3B,SAACoB,GACZ,MAAM,WAAN,OAAkBA,EAAlB,gBAI2BC,CAAWV,EAAMX,OAGlDD,EAAWc,QAGbd,EAAW,MACV,CAACC,IAEJM,qBAAU,WACRH,GAAqB,KACpB,CAACL,IAEJQ,qBAAU,WAAO,IAAD,EACd,UAAAF,EAAkBkB,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,aACrD,CAACtB,IAEJ,IAAMuB,EAAyB,SAACC,GAC9BzB,EAAcyB,EAAMC,OAAOC,cAsB7B,OACE,gCACE,eAAClC,EAAD,qBACE,uBAAOmC,cAAY,QAAQC,QA5Db,SAACJ,GACnBzB,EAAcyB,EAAMC,OAAOI,QA2D0BA,MAAO/B,EAAYgC,QAtBtD,SAACN,GACS,IAAD,EAA3B,GAAkB,UAAdA,EAAMO,IAKV,GAAkB,cAAdP,EAAMO,IAMV,GAAkB,YAAdP,EAAMO,SAAV,CACE,IAAMC,EAAOhC,EAAmB,EAChCC,EAAoB+B,EAAO,GAAK,EAAIA,OARtC,CACE,IAAMA,EAAOhC,EAAmB,EAChCC,EAAoB+B,IAASpC,EAAQgB,OAAS,EAAIoB,QANlD,UAAA9B,EAAkBkB,eAAlB,SAA2Ba,cAuB3B,cAAC1C,EAAD,UACGK,GAAWA,EAAQiB,KAAI,SAACJ,EAAMyB,GAC7B,IAAIC,EAAY,GAIhB,OAHInC,IAAqBkC,IACrBC,EAAI,IAAUjC,GAGhB,cAACT,EAAD,CAAkB2C,UAAWpC,IAAqBkC,EAAQ,mBAAgBG,EAA1E,SACE,cAAChD,EAAD,yBAAQiD,QAASf,GAA4BY,GAA7C,IAAmDI,wBAAyB,CAACC,OAAQ/B,EAAKM,MAAO0B,MAAOhC,EAAKK,aADpGoB,YC9HjBQ,EAAYpD,YAAO,SAAPA,CAAH,sOAWTqD,EAAarD,YAAO,MAAPA,CAAH,8GAOVsD,EAAOtD,YAAO,OAAPA,CAAH,iEAkBKuD,MAbf,WACE,OACE,eAACF,EAAD,WACE,cAACD,EAAD,UACE,sDAEF,cAACE,EAAD,UACE,cAAC,EAAD,UCrBOE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7b6d0285.chunk.js","sourcesContent":["export const fruitList = [\n\"Açaí\",\n\"Apple\",\n\"Akee\",\n\"Apricot\",\n\"Avocado\",\n\"Banana\",\n\"Bilberry\",\n\"Blackberry\",\n\"Blackcurrant\",\n\"Black sapote\",\n\"Blueberry\",\n\"Boysenberry\",\n\"Buddha's hand\",\n\"Crab apples\",\n\"Currant\",\n\"Cherry\",\n\"Cherimoya\",\n\"Chico fruit\",\n\"Cloudberry\",\n\"Coconut\",\n\"Cranberry\",\n\"Cucumber\",\n\"Damson\",\n\"Date\",\n\"Dragonfruit\",\n\"Pitaya\",\n\"Durian\",\n\"Elderberry\",\n\"Feijoa\",\n\"Fig\",\n\"Goji berry\",\n\"Gooseberry\",\n\"Grape\",\n\"Raisin\",\n\"Grapefruit\",\n\"Guava\",\n\"Honeyberry\",\n\"Huckleberry\",\n\"Jabuticaba\",\n\"Jackfruit\",\n\"Jambul\",\n\"Japanese plum\",\n\"Jostaberry\",\n\"Jujube\",\n\"Juniper berry\",\n\"Kiwano\",\n\"Kiwifruit\",\n\"Kumquat\",\n\"Lemon\",\n\"Lime\",\n\"Loquat\",\n\"Longan\",\n\"Lychee\",\n\"Mango\",\n\"Mangosteen\",\n\"Marionberry\",\n\"Melon\",\n\"Cantaloupe\",\n\"Honeydew\",\n\"Watermelon\",\n\"Miracle fruit\",\n\"Mulberry\",\n\"Nectarine\",\n\"Nance\",\n\"Olive\",\n\"Orange\",\n\"Blood orange\",\n\"Clementine\",\n\"Mandarine\",\n\"Tangerine\",\n\"Papaya\",\n\"Passionfruit\",\n\"Peach\",\n\"Pear\",\n\"Persimmon\",\n\"Plantain\",\n\"Plum\",\n\"Prune\",\n\"Pineapple\",\n\"Pineberry\",\n\"Plumcot\",\n\"Pomegranate\",\n\"Pomelo\",\n\"Purple mangosteen\",\n\"Quince\",\n\"Raspberry\",\n\"Salmonberry\",\n\"Rambutan\",\n\"Redcurrant\",\n\"Salal\",\n\"Salak\",\n\"Satsuma\",\n\"Soursop\",\n\"Star apple\",\n\"Star fruit\",\n\"Strawberry\",\n\"Surinam cherry\",\n\"Tamarillo\",\n\"Tamarind\",\n\"Ugli fruit\",\n\"White currant\",\n\"White sapote\",\n\"Yuzu\",\n\"Avocado\",\n\"Bell pepper\",\n\"Chili pepper\",\n\"Corn kernel\",\n\"Cucumber\",\n\"Eggplant\",\n\"Olive\",\n\"Pea\",\n\"Pumpkin\",\n\"Squash\",\n\"Tomato\",\n\"Zucchini\"\n];\n","import { useEffect, useState, useRef, KeyboardEvent } from 'react';\nimport { fruitList } from '../constants/words';\nimport styled from 'styled-components';\n\nconst Button = styled('button')`\n  border: none;\n  background-color: transparent;\n  display: block;\n  padding: 10px;\n  width: 100%;\n  font-size: 16px;\n  text-align: left;\n\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  &strong {\n    color: #00bcd4;\n  }\n`;\n\nconst List = styled('ol')`\n  display: block;\n  margin: 0;\n  padding: 0;\n  box-shadow: 0px 2px 6px #d2cece;\n  max-height: 300px;\n  overflow: auto;\n`;\n\nconst Field = styled('label')`\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: baseline;\n  border-bottom: solid 2px #00bcd4;\n  padding-bottom: 5px;\n  padding-top: 5px;\n  input {\n    font-size: 16px;\n    margin-left: 10px;\n    border: none;\n    padding: 0;\n    outline: none;\n  }\n`\n\nconst Item = styled('li')`\n  display: block;\n  padding: 0px;\n  &.highlighted {\n    background-color: #e2f3f5;\n  }\n`;\n\nconst AutocompleteInput = () => {\n  const [results, setResults] = useState<{bold: string, original:string}[]>([]);\n  const [inputValue, setInputValue] = useState<string>('');\n  const [highlightedIndex, setHighlightedIndex] = useState<number>(-1);\n  const highlightedOption = useRef() as React.MutableRefObject<HTMLInputElement>;\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n  }\n\n  useEffect(() => {\n    if (inputValue) {\n      const inputValueLowerCase = inputValue.toLowerCase();\n      const filterResults = fruitList.filter((item) => item.toLowerCase().includes(inputValueLowerCase));\n      const newResults = filterResults.length > 1 || filterResults[0]?.toLowerCase() !== inputValueLowerCase ? filterResults : [];\n\n      const parsedResults = newResults.map((item) => {\n        const boldString = (item: string, inputValue:string) => {\n          const test = (str: string) => {\n            return `<strong>${str}</strong>`;\n          }\n          return item.replace(RegExp(inputValue , 'gi'), test)\n        };\n        return { original: item, bold: boldString(item, inputValue) };\n      });\n\n      setResults(parsedResults);\n      return;\n    }\n    setResults([]);\n  }, [inputValue]);\n\n  useEffect(() => {\n    setHighlightedIndex(-1);\n  }, [results]);\n\n  useEffect(() => {\n    highlightedOption.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [highlightedIndex]);\n\n  const handleElementSelection = (event: any) => {\n    setInputValue(event.target.textContent);\n  };\n\n  const handleKeyUp = (event: KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      highlightedOption.current?.click();\n      return;\n    }\n\n    if (event.key === 'ArrowDown') {\n      const next = highlightedIndex + 1;\n      setHighlightedIndex(next === results.length ? 0 : next);\n      return;\n    }\n\n    if (event.key === 'ArrowUp') {\n      const next = highlightedIndex - 1;\n      setHighlightedIndex(next < 0 ? -1 : next);\n      return;\n    }\n  }\n\n  return (\n    <div>\n      <Field>Search:\n        <input data-testid='input' onInput={handleInput} value={inputValue} onKeyUp={handleKeyUp} />\n      </Field>\n\n      <List>\n        {results && results.map((item, index) => {\n          let opts: any = [];\n          if (highlightedIndex === index) {\n              opts['ref'] = highlightedOption;\n          }\n          return (\n            <Item key={index} className={highlightedIndex === index ? 'highlighted' : undefined } >\n              <Button onClick={handleElementSelection} {...opts} dangerouslySetInnerHTML={{__html: item.bold}} title={item.original} />\n            </Item>\n          )\n        })}\n      </List>\n    </div>\n  );\n};\n\nexport default AutocompleteInput;","import React from 'react';\nimport styled from 'styled-components';\n\nimport AutocompleteInput from './components/autocompleteInput';\n\nconst AppHeader = styled('header')`\n  background-color: #282c34;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n  margin-bottom: 10px;\n`;\n\nconst AppWrapper = styled('div')`\n  text-align: center;\n  display: block;\n  max-width: 800px;\n  margin: 0 auto;\n`;\n\nconst Main = styled('main')`\n  padding: 20px;\n  display: block;\n`;\n\nfunction App() {\n  return (\n    <AppWrapper>\n      <AppHeader>\n        <h1>Autocomplete input</h1>\n      </AppHeader>\n      <Main>\n        <AutocompleteInput/>\n      </Main>\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}